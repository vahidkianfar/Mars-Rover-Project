@startuml "MarsRover-Kata-UML.png"

interface IVehicle
{
+ void TurnAround()
+ void TurnLeft()
+ void TurnRight()
+ void Move()
+ void ExecuteCommand(string getMovement)
+ void GetCurrentPositionForConsole()
+ string GetCurrentPositionForFile()
+ int SetAxisX(int axisX)
+ int SetAxisY(int axisY)
}

interface ISurface
{
+ int Lenght_X
+ int Width_Y
}

interface IPosition
{
+ List<int> initialPosition
}

interface INavigation
{
+ void RunCommand(IVehicle marsRover)
}

interface IMovementDirection
{
+ void MoveForward()
+ void MoveBackward()
+ void MoveLeft()
+ void MoveRight()
}

class MarsRover implements IVehicle
{
+ int axisX
+ int axisY
+ ChangeDirection.Direction roverDirection
- MovingTheRover _movingTheRover


+ MarsRover(string getInitialPosition)
+ ExecuteCommand(string getMovement)
+ void TurnLeft()
+ void TurnRight()
+ void TurnAround()
+ void MoveForward()
+ void MoveBackward()
+ void SetAxisY(int axisY)
+ void SetAxisX(int axisX)
- void SetDirection(string direction)
+ int GetAxisY()
+ int GetAxisX()
+ Enum GetDirection()
+ void GetCurrentPositionForConsole()
+ string GetCurrentPositionForFile()
}
class MissionControl
{

- List<IVehicle> _roverList
+ ISurface Plateau
+ bool IsMissionComplete

+ ISurface GetPlateauDetails()
+ IVehicle GetRoverDetails(int roverNumber)
+ void ExecuteCommand(int roverNumber, string getMovement)

+ DeployRover(IVehicle rover, ISurface plateau )
+ CollisionInnerDetection(List<IVehicle> rovers)
- bool CollisionDetection(IVehicle)
- CheckNumberOfRoversOnSpecificPlateau(List<IVehicle>)

}
class MarsPlateau implements ISurface
{
+ int Lenght_X
+ int Width_Y
+ MarsPlateau(string gridSize)
+ int GetLenght()
+ int GetWidth()
}
class NavigateBack implements INavigation
{
+ void RunCommand(IVehicle)
}
class NavigateLeft implements INavigation
{
+ void RunCommand(IVehicle)
}

class NavigateRight implements INavigation
{
+ void RunCommand(IVehicle)
}
class NavigateForward implements INavigation
{
+ void RunCommand((IVehicle marsRover)
}
class PositionInterpreter implements IPosition
{
+ List<int> initialPosition
+ string initialDirection
}

class NavigationInterpreter
{
- Dictionary<string, INavigation> NavigationDictionary
+ INavigation SetNavigation(char NavCommands)
}
class ChangeDirection
{
+ enum Direction
+ void TurnLeft(IVehicle)
+ void TurnRight(IVehicle)
+ void TurnAround(IVehicle)
}

class MovingTheRover implements IMovementDirection
{
+ MoveForward(IVehicle rover)
+ MoveBackward(IVehicle rover)
+ MoveLeft(IVehicle rover)
+ MoveRight(MIVehicle rover)
}
class Validator
{
+ bool DeploymentPositionValidator(int xCoordinate, int yCoordinate, MarsPlateau plateau)
+ bool CommandValidator(string inputCommand)
+ bool DirectionValidator(string direction)
+ bool AxisValidator(int axis)
+ bool RectangularPlateauValidator(string plateauSize)
+ bool NumberOfRoversValidator(int roverCounter, int maxNumberOfBlocks)

}

class CollisionMessages
{
+ void SOSMorseCode()
+ void CollisionMessageForSamePosition()
+ void CollisionMessageForDeploymentOtherRovers()
+ void CollisionMessageForSameDestination()
}

class UserGuideline
{
+ void InputExampleForPlateauSize()
+ void InputExampleForDeploymentPosition()
+ void InputExampleForInstructionFirstRover()
+ void ProgressBar()
+ void BeepSoundForError()
+ void BeepSoundForSuccess()
}
class UserInputs
{
+ ISurface userPlateau
+ IVehicle userRover
+ List<string> userCommands
+ void GrabMovementInstructionsFromUser()
+ void GrabPlateauSizeFromUser()
+ void GrabRoverPositionFromUser()
}
class DrawPlateauAndRovers
{
+ async Task<Table> LiveTable()
}
class ReadFromFile
{
+ DirectoryInfo directory
+ IEnumerable<string> Read()
}
class WriteOnFile
{
- string _path
- :ist<string> _content
- void Write()
}
INavigation --> IVehicle
MarsRover <--> ChangeDirection
MarsRover <--> MovingTheRover
MarsRover <--> PositionInterpreter
MarsRover --> MarsPlateau
MarsRover --> NavigationInterpreter
MarsRover --> Validator


NavigateLeft --> IVehicle
NavigateRight --> IVehicle
NavigateForward --> IVehicle
NavigateBack --> IVehicle

NavigationInterpreter --> INavigation

MarsPlateau --> Validator

MissionControl --> IVehicle
MissionControl --> ISurface
MissionControl --> Validator
MissionControl --> MovingTheRover

DrawPlateauAndRovers --> MissionControl


@enduml