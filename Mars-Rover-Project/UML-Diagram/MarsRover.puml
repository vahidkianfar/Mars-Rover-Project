@startuml "MarsRover-Kata-UML.png"

interface IVehicle
{
+ void TurnLeft()
+ void TurnRight()
+ void Move()
}

interface ISurface
{
+ int Lenght_X
+ int Width_Y
}

interface IPosition
{
+ List<int> initialPosition
}

interface INavigation
{
+ void RunCommand(IVehicle marsRover)
}

class MarsRover implements IVehicle
{
+ int axisX
+ int axisY
+ MarsPlateau marsPlateau
+ string direction
+ MarsRover(string getInitialPosition)
+ ExecuteCommand(string getMovement)
+ TurnLeft()
+ TurnRight()
+ MoveForward()
}
class MarsPlateau implements ISurface
{
+ int Lenght_X
+ int Width_Y
+ MarsPlateau(string gridSize)
}
class NavigateLeft implements INavigation
{
+ RunCommand(IVehicle marsRover)
}

class NavigateRight implements INavigation
{
+ RunCommand(IVehicle marsRover)
}
class PositionInterpreter implements IPosition
{
+ List<int> initialPosition
+ string initialDirection
- SetPositionAndDirection(string getPositionAndDirection)
}
class NavigateForward implements INavigation
{
+ RunCommand((IVehicle marsRover)
}
class NavigationInterpreter
{
- Dictionary<string, INavigation> NavigationDictionary
+ SetNavigation(charNavCommands)
}
class ChangeDirection
{
+ TurnLeft(MarsRover marsRover)
+ TurnRight(MarsRover marsRover)
}

class MoveForward
{
+ RunCommand(IVehicle marsRover)
}
class Validator
{
+ DeploymentPositionValidator(int xCoordinate, int yCoordinate, MarsPlateau plateau)
+ CommandValidator(string inputCommand)
+ DirectionValidator(string direction)
+ AxisValidator(int axis)
+ RectangularPlateauValidator(string plateauSize)
+ PositionValidator()
}
INavigation --> IVehicle
MarsRover <--> ChangeDirection
MarsRover <--> MoveForward
MarsRover <--> NavigateForward
MarsRover <--> PositionInterpreter
MarsRover --> MarsPlateau
MarsRover --> NavigationInterpreter
MarsRover --> Validator


NavigateLeft --> IVehicle
NavigateRight --> IVehicle
NavigateForward --> IVehicle

NavigationInterpreter --> INavigation

MarsPlateau --> Validator


@enduml